
----------------------------------------------
Model Data:

	Skeleton
		- heirarchy of bones
	Bone 
		- Name
		- Parent
		- position  (v3)
		- orientation (quat)
		

	SkeletalAnimation	
		- name
		- bones[]
			- position_keyframes[]
				- time
				- position
			- orientation_keyframes[]
				- time
				- orientation
		- FPS
		- TotalTime
		- TotalFrames
		
	Meshes[]
		- vertex format:  PNTC, PNTCB, PNTCB4
			Ex: static mesh, bone mesh, bone weight mesh,
		- vertices (streams)
			- pos, normal, boneIndices, boneWeights
		- indices
		MeshPart
			- start index
			- end index
			- material ref
			
		
	Material
		Shader
		Textures[ shaderProperty, texturePath ]
		Shader Settings[ property, value ]
			
	Node Structure...
	Animations..

	

--------------------------------
-- COLLADA layout

Root
	libraries
		scenes
		materials
		images
		effects
		geometries
		controllers
		cameras
		lights
	
Scene
	= <visual_scene id="MaxScene">
	
Node
	= <node 
		id="node-skeleton_head-01" 
		name="skeleton_head-01" 
		sid="joint5" 
		type="JOINT"
		>
    = transforms: (translate + rotate) | (matrix)
		<translate>0.244848 0.05305004 -0.01584041</translate>
        <rotate>0.6984661 -0.1558475 0.6984674 -197.7163</rotate>
		|
        <matrix>1 0 0 0.0407734 0 1 0 0.05301839 0 0 1 -1.965668 0 0 0 1</matrix>
	
	= children:
		instance_light
		instance_geometry
		instance_controller
		instance_camera

Controller
	type = skin
	source = (geometry url) skeleton-body
	- contains indices & weights mapping VERTICES to NODES
	
Geometry
	vertex data
	triangle blob + material
	
Animation
	Contains animation & keyframes for NODES  (and possible other collada entities)


-------------------------------------
-- Gdk Models

Model

	ChildAssets
		Textures
		
	Materials
		- Name
		- Flags		define the shader to use..  DiffuseTex, BumpDiffuseTex, NoTex, Wood, etc..
		- Ambient, Diffuse, Specular, etc
		- Textures
		
	Meshes
		- Vertices
		- Indices
		- Parts[]
			- Material
				- Diffuse Texture
				- Bump Texture
				- Other params...
	
	SkeletalMeshes
		- Vertices
		- Indices
		- Parts[]
			- Material
				- Diffuse Texture
				- Bump Texture
				- Other params...
	
	Nodes
		Nodes...
		Transform
			
	Animations
		Animation
			- name
			- total time
			- Keyframes (time, Node, transform, etc)

ModelInstance - instanced data for a model...
	- Model
	
	- CurrentAnimation
	- AnimationTime
	
	- Nodes	- instanced node tree, with current transforms
		transforms
		
	- Materials - instanced materials.. copies of the base materials
	
	
-----------------------------

- Load
	
		open .gdkmodel
		parse materials settings into a material definition..
			grep flags, determine shader to use
			copy shader ref & create shader params
			apply material settings to shader params 
			...  ^^ asset pipe should do all this!
			
- model processor:

	materials..
		determine shader to use
			Mesh/Simple
			Mesh/DiffuseTextured
			Mesh/DiffuseBumpTextured
			Mesh/WoodProcedural
			etc
			
		
		
- Load
	
	// Load the model...
	treeModel = Assets.Load<Model>("Tree");
			(contains the meshes, materials, animations, bone structures, etc)
			(material definitions
			
	ModelInstance* myTree = Tree.CreateInstance();
			(references the base model, copies the materials, instantiates the bone heirarchy, CurrentAnimation)
	
	... Setup Graphics::GlobalParameters.World (world matrix)
	
	myTree->Render();
	
	
	GdkDelete(myTree);
			
		
		